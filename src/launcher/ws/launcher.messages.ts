// Simple, boring, reliable envelope shared by server and clients.

export type FrameType = 'hello' | 'command' | 'ack' | 'error';

// Server → Client
export interface ServerHello {
  t: 'hello';
  wsSessionId: string;
  protocol: 1; // bump if you change wire format
  serverTime: number; // ms epoch
}

export interface ServerCommand<T = unknown> {
  t: 'command';
  id: string; // server-generated UUID per command (client must ACK this)
  type: CommandType; // e.g., 'runGame'
  payload: T; // e.g., { id, name }
}

export interface ErrorFrame {
  t: 'error';
  code: string;
  message: string;
}

// Client → Server
export interface AckFrame {
  t: 'ack';
  id: string; // the command id being acked (renamed from 'ref')
}

export interface HelloClientFrame {
  t: 'hello';
  instanceId: string; // required; process-unique ID generated by client
}

export type WsServerFrame = ServerHello | ServerCommand | ErrorFrame;
export type ClientFrame = AckFrame | HelloClientFrame;

export type CommandType = 'runGame' | 'quit';
