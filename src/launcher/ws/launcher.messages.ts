// Simple, boring, reliable envelope shared by server and clients.

export type FrameType = 'hello' | 'command' | 'ack' | 'pong' | 'error';

export interface HelloServerFrame {
  t: 'hello';
  wsSessionId: string;
  protocol: number; // bump if you change wire format
  serverTime: number; // ms epoch
}

export interface CommandFrame<T = unknown> {
  t: 'command';
  id: string; // server-generated UUID per command
  type: CommandType;
  payload: T;
  ts: number; // server send time (ms epoch)
}

export interface AckFrame {
  t: 'ack';
  ref: string; // the command id being acked
}

export interface ErrorFrame {
  t: 'error';
  ref?: string;
  code: string;
  message: string;
}

export type WsServerFrame = HelloServerFrame | CommandFrame | ErrorFrame;

export type WsClientFrame =
  | AckFrame
  | { t: 'pong' }
  | {
      t: 'hello';
      instanceId?: string; // process-unique ID generated by client
      deviceId?: string; // machine-stable ID persisted by client
      clientVersion?: string;
      platform?: string;
      lastAckedCommandId?: string;
    };

export type CommandType = 'runGame' | 'quit';
